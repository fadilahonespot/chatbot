// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/fadilahonespot/chatbot/usecase/dto"
	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, req
func (_m *UserUsecase) Login(ctx context.Context, req dto.LoginRequest) (dto.LoginResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 dto.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.LoginRequest) (dto.LoginResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.LoginRequest) dto.LoginResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(dto.LoginResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.LoginRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, req
func (_m *UserUsecase) Register(ctx context.Context, req dto.RegisterRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.RegisterRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
